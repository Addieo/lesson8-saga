{"ast":null,"code":"import _objectSpread from \"/Users/linzhijing/Desktop/\\u6211\\u7684\\u5B66\\u4E60/\\u7B2C\\u4E8C\\u9636\\u6BB5react/\\u8BFE\\u4EF6\\u53CA\\u8D44\\u6599/react\\u9879\\u76EE\\u5B9E\\u6218/lesson8-saga/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { call, put, takeEvery } from \"redux-saga/effects\"; // 模拟登录接口\n\nconst UserService = {\n  login(userName) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userName === \"小明\") {\n          resolve({\n            userName: \"小明\"\n          });\n        } else {\n          reject({\n            err: \"用户名或密码错误\"\n          });\n        }\n      }, 1000);\n    });\n  }\n\n}; //worker saga\n\nfunction* loginHandle(action) {\n  yield put({\n    type: \"loginRequest\"\n  });\n\n  try {\n    //登录\n    const res = yield call(UserService.login, action.payload.userName);\n    yield put({\n      type: \"loginSuccess\",\n      payload: _objectSpread({}, res)\n    });\n  } catch (err) {\n    yield put({\n      type: \"loginFailure\",\n      payload: _objectSpread({}, err)\n    });\n  }\n} //watcher saga\n\n\nfunction* mySaga() {\n  yield takeEvery(\"login\", loginHandle);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/Users/linzhijing/Desktop/我的学习/第二阶段react/课件及资料/react项目实战/lesson8-saga/src/store/mySaga.js"],"names":["call","put","takeEvery","UserService","login","userName","Promise","resolve","reject","setTimeout","err","loginHandle","action","type","res","payload","mySaga"],"mappings":";AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC,C,CAEA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,CAACC,QAAD,EAAW;AACd,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,UAAU,CAAC,MAAM;AACf,YAAIJ,QAAQ,KAAK,IAAjB,EAAuB;AACrBE,UAAAA,OAAO,CAAC;AAAEF,YAAAA,QAAQ,EAAE;AAAZ,WAAD,CAAP;AACD,SAFD,MAEO;AACLG,UAAAA,MAAM,CAAC;AAAEE,YAAAA,GAAG,EAAE;AAAP,WAAD,CAAN;AACD;AACF,OANS,EAMP,IANO,CAAV;AAOD,KARM,CAAP;AASD;;AAXiB,CAApB,C,CAcA;;AACA,UAAUC,WAAV,CAAsBC,MAAtB,EAA8B;AAC5B,QAAMX,GAAG,CAAC;AACRY,IAAAA,IAAI,EAAE;AADE,GAAD,CAAT;;AAGA,MAAI;AACF;AACA,UAAMC,GAAG,GAAG,MAAMd,IAAI,CAACG,WAAW,CAACC,KAAb,EAAoBQ,MAAM,CAACG,OAAP,CAAeV,QAAnC,CAAtB;AACA,UAAMJ,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAE,cADE;AAERE,MAAAA,OAAO,oBAAOD,GAAP;AAFC,KAAD,CAAT;AAID,GAPD,CAOE,OAAOJ,GAAP,EAAY;AACZ,UAAMT,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAE,cADE;AAERE,MAAAA,OAAO,oBAAOL,GAAP;AAFC,KAAD,CAAT;AAID;AACF,C,CAED;;;AAEA,UAAUM,MAAV,GAAmB;AACjB,QAAMd,SAAS,CAAC,OAAD,EAAUS,WAAV,CAAf;AACD;;AAED,eAAeK,MAAf","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\n\n// 模拟登录接口\nconst UserService = {\n  login(userName) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (userName === \"小明\") {\n          resolve({ userName: \"小明\" });\n        } else {\n          reject({ err: \"用户名或密码错误\" });\n        }\n      }, 1000);\n    });\n  }\n};\n\n//worker saga\nfunction* loginHandle(action) {\n  yield put({\n    type: \"loginRequest\"\n  });\n  try {\n    //登录\n    const res = yield call(UserService.login, action.payload.userName);\n    yield put({\n      type: \"loginSuccess\",\n      payload: { ...res }\n    });\n  } catch (err) {\n    yield put({\n      type: \"loginFailure\",\n      payload: { ...err }\n    });\n  }\n}\n\n//watcher saga\n\nfunction* mySaga() {\n  yield takeEvery(\"login\", loginHandle);\n}\n\nexport default mySaga;\n"]},"metadata":{},"sourceType":"module"}